name: üöÄ API Portal Deployment (Improved)

on:
  push:
    paths:
      - 'environments/*.yaml'
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - prod

concurrency:
  group: api-portal-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  detect-environment:
    name: Detect deployment environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      config_file: ${{ steps.detect.outputs.config_file }}
      skip_deployment: ${{ steps.detect.outputs.skip_deployment }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed environment file
        id: detect
        run: |
          # Handle manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ inputs.environment }}"
            echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
            echo "config_file=environments/$ENVIRONMENT.yaml" >> $GITHUB_OUTPUT
            echo "üöÄ Manual deployment for $ENVIRONMENT environment"
            
            # Check if environment is enabled
            if grep -q "^enabled: false" "environments/$ENVIRONMENT.yaml"; then
              echo "skip_deployment=true" >> $GITHUB_OUTPUT
              echo "‚è∏Ô∏è $ENVIRONMENT deployment is disabled"
            else
              echo "skip_deployment=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # Auto-detect from changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^environments/.*\.yaml$" || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "‚ùå No environment files changed"
            exit 1
          fi
          
          # Rest of the detection logic...

  validate-config:
    name: Validate configuration
    needs: detect-environment
    runs-on: ubuntu-latest
    if: needs.detect-environment.outputs.skip_deployment != 'true'
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate YAML syntax
        run: |
          CONFIG_FILE="${{ needs.detect-environment.outputs.config_file }}"
          echo "üîç Validating $CONFIG_FILE syntax..."
          
          # Basic YAML validation
          python -c "import yaml; yaml.safe_load(open('$CONFIG_FILE'))"
          
          echo "‚úÖ YAML syntax is valid"

      - name: Validate required parameters
        run: |
          CONFIG_FILE="${{ needs.detect-environment.outputs.config_file }}"
          
          # Check required fields exist
          REQUIRED_FIELDS=(
            "environment"
            "stack_name"
            "aws.region"
            "aws.account_id"
            "aws.pipeline_execution_role"
            "aws.cloudformation_execution_role"
            "aws.artifacts_bucket"
          )
          
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! grep -q "$field:" "$CONFIG_FILE"; then
              echo "‚ùå Missing required field: $field"
              exit 1
            fi
          done
          
          echo "‚úÖ All required fields present"

  deploy:
    name: Deploy API Portal
    needs: [detect-environment, validate-config]
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-environment.outputs.environment }}  # GitHub environment protection
    permissions:
      id-token: write
      contents: read
    
    steps:
      # ... existing deploy steps ...

  run-smoke-tests:
    name: Run smoke tests
    needs: [detect-environment, deploy]
    runs-on: ubuntu-latest
    if: needs.detect-environment.outputs.skip_deployment != 'true'
    continue-on-error: true
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get portal URL
        run: |
          WEBSITE_URL="${{ needs.deploy.outputs.website_url }}"
          echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          echo "üîç Running health check for $WEBSITE_URL"
          
          # Wait for CloudFront distribution
          sleep 30
          
          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$WEBSITE_URL")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Portal is accessible (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Portal returned HTTP $HTTP_STATUS"
            exit 1
          fi

      - name: API health check
        run: |
          API_URL="${WEBSITE_URL%/}/prod/catalog"
          echo "üîç Checking API endpoint: $API_URL"
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL")
          
          if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 403 ]; then
            echo "‚úÖ API is responding (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå API returned unexpected status: HTTP $HTTP_STATUS"
            exit 1
          fi

  configure-dns:
    # ... existing DNS configuration job ...

  notify-deployment:
    name: Notify deployment status
    needs: [detect-environment, deploy, run-smoke-tests, configure-dns]
    runs-on: ubuntu-latest
    if: always() && needs.detect-environment.outputs.skip_deployment != 'true'
    
    steps:
      - name: Deployment summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Environment: ${{ needs.detect-environment.outputs.environment }}"
          echo "Deploy Status: ${{ needs.deploy.result }}"
          echo "Smoke Tests: ${{ needs.run-smoke-tests.result }}"
          echo "DNS Config: ${{ needs.configure-dns.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi

      # Add Slack/email notification here if needed